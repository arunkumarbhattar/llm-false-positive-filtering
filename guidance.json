{
  "__comment": "Below are all codeql rules with high severity and medium precision. Created by jq '.runs[0].tool.driver.rules[] | select(.properties[\"security-severity\"] != null and (.properties[\"security-severity\"] | tonumber) >= 7.5) | .id' cpp.sarif",

  "cpp/comma-before-misleading-indentation": "",
  "cpp/offset-use-before-range-check": "",
  "cpp/incorrect-not-operator-usage": "",
  "cpp/uninitialized-local": "",
  "cpp/unsafe-strncat": "",
  "cpp/unsafe-strcat": "",
  "cpp/suspicious-sizeof": "",
  "cpp/bad-strncpy-size": "",
  "cpp/uncontrolled-allocation-size": "",
  "cpp/suspicious-pointer-scaling-void": "",
  "cpp/suspicious-pointer-scaling": "",
  "cpp/unsafe-create-process-call": "",
  "cpp/cleartext-storage-buffer": "",
  "cpp/overrunning-write-with-float": "",
  "cpp/unbounded-write": "",
  "cpp/overrunning-write": "",
  "cpp/user-controlled-bypass": "",
  "cpp/uncontrolled-process-operation": "",
  "cpp/path-injection": "",
  "cpp/tainted-permissions-check": "",
  "cpp/cleartext-storage-database": "",
  "cpp/unsigned-difference-expression-compared-zero": "",
  "cpp/potentially-dangerous-function": "",
  "cpp/world-writable-file-creation": "",
  "cpp/certificate-result-conflation": "",
  "cpp/certificate-not-checked": "",
  "cpp/incorrect-allocation-error-handling": "",
  "cpp/unterminated-variadic-call": "",
  "cpp/suspicious-allocation-size": "",
  "cpp/missing-check-scanf": "",
  "cpp/use-after-free": "",
  "cpp/double-free": "",
  "cpp/allocation-too-small": "",

  "cpp/uninitialized-local": "The warning at a specific source line is a false positive if the variable is always initialized along all the paths that reach that line.",
  "cpp/unbounded-write": "The warning is FP if the destination buffer is longer than source buffer.",
  "cpp/missing-check-scanf": "The return value of the sscanf call that writes into a variable is checked for the expected number of parsed items corresponding to the variable.",
  "cpp/uncontrolled-allocation-size": "The warning is TP if the memory allocation size has no bounds."
}
